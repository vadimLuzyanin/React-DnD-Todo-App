{"version":3,"sources":["Task.jsx","Column.jsx","AddTaskForm.jsx","MobileColumnsContainer.jsx","LocalStorageLoad.jsx","Title.jsx","LocalStorageSave.jsx","App.jsx","index.js"],"names":["useStyles","makeStyles","theme","listItem","overflow","paper","padding","spacing","marginBottom","paperTransition","transform","transitionProperty","transitionDuration","button","marginLeft","buttonInner","breakpoints","down","width","buttonContainer","display","flexDirection","alignItems","next","fontSize","marginRight","color","palette","primary","main","Task","taskId","taskContent","index","columnId","handleTaskDelete","handleTaskEdit","mobile","handleTaskMobileMove","isDragDisabled","disableDrag","classes","useState","deleteDialogOpen","setDeleteDialogOpen","handleDeleteDialogOpen","handleDeleteDialogClose","handleCloseAndDelete","editDialogOpen","setEditDialogOpen","taskEditValue","setTaskEditValue","useEffect","handleEditDialogOpen","handleEditDialogClose","handleCloseAndEdit","sentToNextColumn","setSentToNextColumn","draggableId","provided","snapshot","ListItem","component","Paper","className","elevation","isDragging","draggableProps","dragHandleProps","ref","innerRef","ListItemText","ListItemIcon","Button","variant","onClick","currentColumn","nextColumnId","setTimeout","handleSend","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","TextField","value","onChange","e","target","multiline","fullWidth","root","list","paddingTop","paddingLeft","paddingRight","marginTop","overflowY","overflowX","minHeight","maxHeight","listMobile","up","Column","tasks","title","mappedTasks","map","task","id","content","key","Box","Typography","align","droppableId","List","droppableProps","isDraggingOver","placeholder","form","height","justifyContent","mobileForm","input","mobileInput","submit","mobileSubmit","AddTaskForm","handleTaskAddition","newTaskInputState","setNewTaskInputState","onSubmit","preventDefault","size","label","type","TabPanel","props","children","other","hidden","tabPanel","tabPanelTransitionForwards","tabPanelTransitionBackwards","MobileColumnsContainer","columns","addEventFlag","setValue","transition","setTransition","Tabs","event","newValue","Tab","tab","todo","doing","done","LocalStorageLoad","isLoadOpen","setIsLoadOpen","handleStateLoad","selectedList","setSelectedList","openLoadSnackbar","setOpenLoadSnackbar","openDeleteSnackbar","setOpenDeleteSnackbar","listNameForSnackbar","setListNameForSnackbar","confirmDeleteDialogOpen","setConfirmDeleteDialogOpen","handleLoadClose","getSavedNames","savedNames","i","localStorage","length","name","checkArr","parsedName","split","filter","item","every","joinedParsedName","join","date","Date","now","push","setSavedNamesState","savedNamesState","handleDeleteConfirmClose","toDelete","removeItem","handleDelete","wrappedSavedNames","sort","prev","current","arr","selected","ListItemSecondaryAction","IconButton","edge","loadedCombinedState","getItem","parsedCombinedState","JSON","parse","tasksState","todoColumnState","doingColumnState","doneColumnState","handleLoad","handleDeleteConfirmOpen","Divider","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","appbar","margin","moblileAppbar","toolbar","menuIconMobile","menuIcon","Title","isMobileVersion","setIsSaveOpen","AppBar","position","Toolbar","LocalStorageSave","isSaveOpen","combinedState","listName","setListName","openSnackbar","setOpenSnackbar","stateString","stringify","innerName","setItem","handleListSave","initalTasks","initialTodoColumn","initialDoingColumn","initialDoneColumn","App","setTasksState","setTodoColumnState","setDoingColumnState","setDoneColumnState","setIsMobileVersion","useTheme","mathches","useMediaQuery","mapThroughTasks","taskList","setAddEventFlag","setColumnState","newTaskContent","editedTask","setIsDragDisabled","CssBaseline","Container","maxWidth","style","loadedTasksState","loadedTodoColumnState","loadedDoingColumnState","loadedDoneColumnState","newTaskId","newTasksState","newTodoColumnState","onDragEnd","result","source","destination","startColumn","finishColumn","setStartColumnState","setFinishColumnState","splice","column","oldColumnId","newColumnId","indexOf","bool","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7a68894.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport { makeStyles } from '@material-ui/core'\r\n\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport Button from '@material-ui/core/Button'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    listItem: {\r\n        overflow: 'auto'\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    paperTransition: {\r\n        padding: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n        transform: 'translateX(110%)',\r\n        transitionProperty: 'transform',\r\n        transitionDuration: '0.5s'\r\n    },\r\n    button: {\r\n        marginLeft: theme.spacing(1),\r\n    },\r\n    buttonInner: {\r\n        [theme.breakpoints.down('md')]: {\r\n            width: 0,\r\n            marginBottom: '5px',\r\n        },\r\n    },\r\n    buttonContainer: {\r\n        display: 'flex',\r\n        [theme.breakpoints.down('md')]: {\r\n            flexDirection: 'column',\r\n            alignItems: 'flex-end',\r\n        }\r\n    },\r\n    next: {\r\n        fontSize: '50px',\r\n        marginRight: '-25px',\r\n        color: theme.palette.primary.main,\r\n    },\r\n}))\r\n\r\nconst Task = ({ taskId, taskContent, index, columnId, handleTaskDelete, handleTaskEdit, mobile, handleTaskMobileMove, isDragDisabled, disableDrag }) => {\r\n    const classes = useStyles();\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n\r\n    const handleDeleteDialogOpen = () => {\r\n        setDeleteDialogOpen(true)\r\n    };\r\n\r\n    const handleDeleteDialogClose = () => {\r\n        setDeleteDialogOpen(false)\r\n    }\r\n\r\n    const handleCloseAndDelete = () => {\r\n        setDeleteDialogOpen(false);\r\n        handleTaskDelete(taskId, columnId)\r\n    }\r\n\r\n    const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n    const [taskEditValue, setTaskEditValue] = useState(taskContent)\r\n\r\n    useEffect(() => {\r\n        if (!taskEditValue && !editDialogOpen) {\r\n            setTaskEditValue(taskContent)\r\n        }\r\n    }, [taskEditValue, editDialogOpen, taskContent])\r\n\r\n    const handleEditDialogOpen = () => {\r\n        setEditDialogOpen(true)\r\n    }\r\n\r\n    const handleEditDialogClose = () => {\r\n        setEditDialogOpen(false)\r\n        setTaskEditValue('')\r\n    }\r\n\r\n    const handleCloseAndEdit = () => {\r\n        if (!taskEditValue) {\r\n            return\r\n        }\r\n        handleTaskEdit(taskId, taskEditValue);\r\n        setTaskEditValue('')\r\n        setEditDialogOpen(false);\r\n    }\r\n\r\n    const [sentToNextColumn, setSentToNextColumn] = useState(false);\r\n\r\n    const handleSend = (currentColumn) => {\r\n        setSentToNextColumn(true);\r\n        disableDrag(true);\r\n        let nextColumnId;\r\n        setTimeout(() => {\r\n            switch (currentColumn) {\r\n                case 'todo': nextColumnId = 'doing';\r\n                    break;\r\n                case 'doing': nextColumnId = 'done';\r\n                    break;\r\n                default: break;\r\n            }\r\n            handleTaskMobileMove(taskId, columnId, nextColumnId);\r\n            disableDrag(false);\r\n        }, 500);\r\n    }\r\n\r\n    return (\r\n        <Draggable draggableId={taskId} index={index} isDragDisabled={isDragDisabled}>\r\n            {(provided, snapshot) => (\r\n                <ListItem\r\n                    component={Paper}\r\n                    className={sentToNextColumn ? classes.paperTransition : classes.paper}\r\n                    elevation={snapshot.isDragging ? 6 : 1}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}\r\n                >\r\n                    <ListItemText className={classes.listItem}>\r\n                        {taskContent}\r\n                    </ListItemText>\r\n                    <div className={classes.buttonContainer}>\r\n                        <ListItemIcon className={classes.button}>\r\n                            <Button variant='outlined' color='primary' className={classes.buttonInner} onClick={handleEditDialogOpen}>edit</Button>\r\n                        </ListItemIcon>\r\n                        <ListItemIcon className={classes.button}>\r\n                            <Button variant='outlined' color='secondary' className={classes.buttonInner} onClick={handleDeleteDialogOpen}>delete</Button>\r\n                        </ListItemIcon>\r\n                    </div>\r\n                    {mobile && columnId !== 'done' && <ListItemIcon className={classes.next} onClick={() => handleSend(columnId)}>\r\n                        <NavigateNextIcon fontSize='inherit' color='inherit' />\r\n                    </ListItemIcon>}\r\n\r\n                    <Dialog open={deleteDialogOpen} onClose={handleDeleteDialogClose} >\r\n                        <DialogTitle>Are you sure you want to delete this task?</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                Task content: <br /> {taskContent}\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleDeleteDialogClose} variant='outlined' color='primary' >\r\n                                No\r\n                            </Button>\r\n                            <Button onClick={handleCloseAndDelete} variant='outlined' color='secondary' autoFocus>\r\n                                Yes\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n\r\n                    <Dialog open={editDialogOpen} onClose={handleEditDialogClose}>\r\n                        <DialogTitle >Edit task</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                Enter a new text for this task\r\n                            </DialogContentText>\r\n                            <TextField\r\n                                value={taskEditValue}\r\n                                onChange={(e) => setTaskEditValue(e.target.value)}\r\n                                multiline\r\n                                autoFocus\r\n                                fullWidth\r\n                            />\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleEditDialogClose} variant='outlined' color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={handleCloseAndEdit} variant='outlined' color=\"secondary\">\r\n                                Edit\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </ListItem>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default Task\r\n","import React from 'react'\r\n\r\nimport { Droppable } from 'react-beautiful-dnd'\r\nimport { makeStyles } from '@material-ui/core'\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport List from '@material-ui/core/List'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport Task from './Task'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: theme.spacing(1),\r\n    },\r\n    list: {\r\n        paddingTop: theme.spacing(2),\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        transitionDuration: 200,\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        minHeight: '15vh',\r\n        maxHeight: '75vh',\r\n    },\r\n    listMobile: {\r\n        paddingTop: theme.spacing(2),\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        transitionDuration: 200,\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n        maxHeight: '63vh',\r\n        [theme.breakpoints.up(370)]: {\r\n            maxHeight: '68vh',\r\n        },\r\n        [theme.breakpoints.up('sm')]: {\r\n            maxHeight: '75vh',\r\n        },\r\n    }\r\n}))\r\n\r\nconst Column = ({ tasks, title, columnId, handleTaskDelete, handleTaskEdit, mobile, handleTaskMobileMove, isDragDisabled, disableDrag }) => {\r\n    const classes = useStyles()\r\n\r\n    const mappedTasks = tasks.map((task, index) =>\r\n        <Task\r\n            taskId={task.id}\r\n            taskContent={task.content}\r\n            index={index}\r\n            key={task.id}\r\n            handleTaskDelete={handleTaskDelete}\r\n            handleTaskEdit={handleTaskEdit}\r\n            columnId={columnId}\r\n            mobile={mobile}\r\n            handleTaskMobileMove={handleTaskMobileMove}\r\n            isDragDisabled={isDragDisabled}\r\n            disableDrag={disableDrag}>\r\n        </Task>\r\n    )\r\n    return (\r\n        <Box className={classes.root} width={mobile ? 1 : 1 / 3}>\r\n            <Typography align='center' variant={mobile ? 'h5' : 'h2'}>{title}</Typography>\r\n            <Droppable droppableId={columnId}>\r\n                {(provided, snapshot) => (\r\n                    <List\r\n                        component={Paper}\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                        className={mobile ? classes.listMobile : classes.list}\r\n                        elevation={snapshot.isDraggingOver ? 6 : 1}\r\n                    >\r\n                        {mappedTasks}\r\n                        {provided.placeholder}\r\n                    </List>\r\n                )}\r\n            </Droppable>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Column\r\n","import React, { useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { makeStyles } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles({\r\n    form: {\r\n        display: 'flex',\r\n        width: '100%',\r\n        height: '75px',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-evenly',\r\n        alignItems: 'center',\r\n    },\r\n    mobileForm: {\r\n        display: 'flex',\r\n        width: '100%',\r\n        height: '50px',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-evenly',\r\n        alignItems: 'center',\r\n    },\r\n    input: {\r\n        width: '80%',\r\n    },\r\n    mobileInput: {\r\n        width: '70%'\r\n    },\r\n    submit: {\r\n        width: '10%',\r\n        minHeight: '75%'\r\n    },\r\n    mobileSubmit: {\r\n        width: '10%',\r\n        height: '42px',\r\n        fontSize: '10px',\r\n    },\r\n})\r\n\r\nconst AddTaskForm = ({ handleTaskAddition, mobile }) => {\r\n    const [newTaskInputState, setNewTaskInputState] = useState('')\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <form className={mobile ? classes.mobileForm : classes.form} onSubmit={(e) => {\r\n            e.preventDefault();\r\n            handleTaskAddition(newTaskInputState)\r\n            setNewTaskInputState('')\r\n        }}>\r\n            <TextField size={mobile ? 'small' : 'medium'} className={mobile ? classes.mobileInput : classes.input} label='New Task' variant='outlined' value={newTaskInputState} onChange={(e) => setNewTaskInputState(e.target.value)} />\r\n            <Button size={mobile ? 'small' : 'large'} className={mobile ? classes.mobileSubmit : classes.submit} variant='contained' color='primary' type='submit'>Add Task</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTaskForm\r\n","import React, { useState, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core'\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Tabs from '@material-ui/core/Tabs'\r\nimport Tab from '@material-ui/core/Tab'\r\n\r\nimport Column from './Column'\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            hidden={value !== index}\r\n            {...other}\r\n        >\r\n            {value === index && <Box>{children}</Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    tabPanel: {\r\n        transitionProperty: 'transform',\r\n        transitionDuration: '0.5s'\r\n    },\r\n    tabPanelTransitionForwards: {\r\n        transform: 'translateX(110%)',\r\n        transitionProperty: 'transform',\r\n        transitionDuration: '0.5s'\r\n    },\r\n    tabPanelTransitionBackwards: {\r\n        transform: 'translateX(-110%)',\r\n        transitionProperty: 'transform',\r\n        transitionDuration: '0.5s'\r\n    },\r\n})\r\n\r\nconst MobileColumnsContainer = ({ columns, handleTaskDelete, handleTaskEdit, handleTaskMobileMove, isDragDisabled, disableDrag, addEventFlag }) => {\r\n    const [value, setValue] = useState(0);\r\n\r\n    const [transition, setTransition] = useState(null)\r\n\r\n    const classes = useStyles()\r\n\r\n    const handleChange = (event, newValue) => {\r\n        if (newValue > value) {\r\n            setTransition('forwards')\r\n        } else if (newValue < value) {\r\n            setTransition('backwards')\r\n        }\r\n\r\n        setValue(newValue);\r\n\r\n        setTimeout(() => {\r\n            setTransition(null)\r\n        }, 0)\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (addEventFlag) {\r\n            setTransition('backwards')\r\n\r\n            setValue(0)\r\n\r\n            setTimeout(() => {\r\n                setTransition(null)\r\n            }, 0)\r\n        }\r\n    }, [addEventFlag])\r\n\r\n    return (\r\n        <Box>\r\n            <Tabs value={value} onChange={handleChange} variant='fullWidth' >\r\n                <Tab className={classes.tab} label=\"To Do\" />\r\n                <Tab className={classes.tab} label=\"Doing\" />\r\n                <Tab className={classes.tab} label=\"Done\" />\r\n            </Tabs>\r\n            <TabPanel value={value} index={0} className={transition === 'forwards' ? classes.tabPanelTransitionForwards : transition === 'backwards' ? classes.tabPanelTransitionBackwards : classes.tabPanel}>\r\n                <Column\r\n                    mobile\r\n                    tasks={columns.todo.tasks}\r\n                    handleTaskDelete={handleTaskDelete}\r\n                    title={columns.todo.title}\r\n                    columnId={columns.todo.columnId}\r\n                    handleTaskEdit={handleTaskEdit}\r\n                    handleTaskMobileMove={handleTaskMobileMove}\r\n                    isDragDisabled={isDragDisabled}\r\n                    disableDrag={disableDrag} />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1} className={transition === 'forwards' ? classes.tabPanelTransitionForwards : transition === 'backwards' ? classes.tabPanelTransitionBackwards : classes.tabPanel}>\r\n                <Column\r\n                    mobile\r\n                    tasks={columns.doing.tasks}\r\n                    handleTaskDelete={handleTaskDelete}\r\n                    title={columns.doing.title}\r\n                    columnId={columns.doing.columnId}\r\n                    handleTaskEdit={handleTaskEdit}\r\n                    handleTaskMobileMove={handleTaskMobileMove}\r\n                    isDragDisabled={isDragDisabled}\r\n                    disableDrag={disableDrag} />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={2} className={transition === 'forwards' ? classes.tabPanelTransitionForwards : transition === 'backwards' ? classes.tabPanelTransitionBackwards : classes.tabPanel}>\r\n                <Column\r\n                    mobile\r\n                    tasks={columns.done.tasks}\r\n                    handleTaskDelete={handleTaskDelete}\r\n                    title={columns.done.title}\r\n                    columnId={columns.done.columnId}\r\n                    handleTaskEdit={handleTaskEdit}\r\n                    handleTaskMobileMove={handleTaskMobileMove}\r\n                    isDragDisabled={isDragDisabled}\r\n                    disableDrag={disableDrag} />\r\n            </TabPanel>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default MobileColumnsContainer\r\n","import React, { useState, useEffect, Fragment } from 'react'\r\n\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport Button from '@material-ui/core/Button'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\n\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { makeStyles } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles({\r\n    listItem: {\r\n        overflow: 'auto',\r\n        marginRight: '30px',\r\n    },\r\n})\r\n\r\nconst LocalStorageLoad = ({ isLoadOpen, setIsLoadOpen, handleStateLoad, selectedList, setSelectedList }) => {\r\n    const classes = useStyles()\r\n\r\n    const [openLoadSnackbar, setOpenLoadSnackbar] = useState(false)\r\n    const [openDeleteSnackbar, setOpenDeleteSnackbar] = useState(false)\r\n    const [listNameForSnackbar, setListNameForSnackbar] = useState('')\r\n\r\n    const [confirmDeleteDialogOpen, setConfirmDeleteDialogOpen] = useState(false)\r\n\r\n    const handleLoadClose = () => {\r\n        setIsLoadOpen(false)\r\n    }\r\n\r\n    const getSavedNames = () => {\r\n        let savedNames = [];\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n            const name = localStorage.key(i);\r\n            const checkArr = [name[0], name[1], name[name.length - 1], name[name.length - 2]];\r\n            const parsedName = name.split('').filter((item) => item !== '_')\r\n            if (checkArr.every((item) => item === '_')) {\r\n                const joinedParsedName = parsedName.join('')\r\n                const date = Date.now()\r\n                savedNames.push({\r\n                    name: joinedParsedName,\r\n                    date: date\r\n                })\r\n            }\r\n        }\r\n        return savedNames\r\n    }\r\n\r\n    useEffect(() => {\r\n        const savedNames = getSavedNames()\r\n        setSavedNamesState(savedNames)\r\n    }, [isLoadOpen])\r\n\r\n    const [savedNamesState, setSavedNamesState] = useState(getSavedNames())\r\n\r\n    const handleLoad = (name) => {\r\n        const loadedCombinedState = localStorage.getItem(`__${name}__`);\r\n        const parsedCombinedState = JSON.parse(loadedCombinedState);\r\n        handleStateLoad(\r\n            parsedCombinedState.tasksState,\r\n            parsedCombinedState.todoColumnState,\r\n            parsedCombinedState.doingColumnState,\r\n            parsedCombinedState.doneColumnState,\r\n        )\r\n\r\n        setOpenLoadSnackbar(true)\r\n        setListNameForSnackbar(name)\r\n        setSelectedList(name)\r\n        handleLoadClose()\r\n    }\r\n\r\n    const handleDelete = (name) => {\r\n        localStorage.removeItem(`__${name}__`)\r\n        setSavedNamesState(savedNamesState.filter((item) => item.name !== name))\r\n    }\r\n\r\n    const handleDeleteConfirmOpen = (name) => {\r\n        setConfirmDeleteDialogOpen(true)\r\n        setListNameForSnackbar(name)\r\n    }\r\n\r\n    const handleDeleteConfirmClose = (toDelete, name) => {\r\n        if (toDelete === true) {\r\n            handleDelete(name)\r\n        }\r\n        setConfirmDeleteDialogOpen(false)\r\n        setOpenDeleteSnackbar(true)\r\n        setListNameForSnackbar(name)\r\n    }\r\n\r\n    const wrappedSavedNames = savedNamesState\r\n        .sort((prev, current) => prev.date - current.date)\r\n        .map((item, index, arr) => {\r\n            const name = item.name\r\n            return (\r\n                <Fragment key={`${name}_${index}`}>\r\n                    <ListItem selected={selectedList === name} button>\r\n                        <ListItemText\r\n                            primary={name}\r\n                            className={classes.listItem}\r\n                        />\r\n                        <ListItemSecondaryAction >\r\n                            <IconButton edge='end' onClick={() => handleLoad(name)}>\r\n                                <PublishIcon color='primary' />\r\n                            </IconButton>\r\n                            <IconButton edge=\"end\" onClick={() => handleDeleteConfirmOpen(name)}>\r\n                                <DeleteIcon color='error' />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    {index !== (arr.length - 1) && <Divider />}\r\n                </Fragment>\r\n            )\r\n        })\r\n\r\n    return (\r\n        <Fragment>\r\n            <Dialog open={isLoadOpen} onClose={handleLoadClose} fullWidth >\r\n                <DialogTitle>\r\n                    List of saved lists\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <List>\r\n                        {wrappedSavedNames.length === 0 ? 'No saved lists found' : wrappedSavedNames}\r\n                    </List>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleLoadClose} color=\"secondary\">\r\n                        Cancel\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n                open={openLoadSnackbar}\r\n                autoHideDuration={3000}\r\n                message={`List with name '${listNameForSnackbar}' loaded!`}\r\n                onClose={() => setOpenLoadSnackbar(false)}\r\n            />\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n                open={openDeleteSnackbar}\r\n                autoHideDuration={3000}\r\n                message={`List with name '${listNameForSnackbar}' deleted!`}\r\n                onClose={() => setOpenDeleteSnackbar(false)}\r\n            />\r\n            <Dialog open={confirmDeleteDialogOpen} onClose={() => setConfirmDeleteDialogOpen(false)} >\r\n                <DialogTitle>\r\n                    Confirm that you want to delete this list\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {`Are you sure you want to delete list named '${listNameForSnackbar}'?`}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => handleDeleteConfirmClose(true, listNameForSnackbar)} color=\"secondary\">\r\n                        Yes\r\n                    </Button>\r\n                    <Button onClick={() => setConfirmDeleteDialogOpen(false)} color=\"primary\">\r\n                        No\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default LocalStorageLoad\r\n","import React from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\n\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\n\r\nconst useStyles = makeStyles({\r\n    appbar: {\r\n        margin: '20px 0px'\r\n    },\r\n    moblileAppbar: {\r\n        margin: '10px 0px'\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    menuIconMobile: {\r\n        fontSize: '35px'\r\n    },\r\n    menuIcon: {\r\n        fontSize: '50px'\r\n    }\r\n})\r\n\r\nconst Title = ({ isMobileVersion, setIsLoadOpen, setIsSaveOpen }) => {\r\n    const classes = useStyles()\r\n\r\n    const handleLoadOpen = () => {\r\n        setIsLoadOpen(true)\r\n    }\r\n\r\n    const handleSaveOpen = () => {\r\n        setIsSaveOpen(true)\r\n    }\r\n\r\n    return (\r\n        <AppBar color='transparent' position=\"static\" className={isMobileVersion ? classes.moblileAppbar : classes.appbar}>\r\n            <Toolbar className={classes.toolbar}>\r\n                <IconButton edge='start' color=\"inherit\" onClick={handleSaveOpen}>\r\n                    <GetAppIcon color='secondary' className={isMobileVersion ? classes.menuIconMobile : classes.menuIcon} />\r\n                    {!isMobileVersion && 'Save'}\r\n                </IconButton>\r\n                <Typography variant={isMobileVersion ? 'h4' : 'h1'} align='center'>Todo List</Typography>\r\n                <IconButton edge='end' color=\"inherit\" onClick={handleLoadOpen}>\r\n                    <PublishIcon color='secondary' className={isMobileVersion ? classes.menuIconMobile : classes.menuIcon} />\r\n                    {!isMobileVersion && 'Load'}\r\n                </IconButton>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Title\r\n","import React, { useState, Fragment } from 'react'\r\n\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport Button from '@material-ui/core/Button'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\n\r\nconst LocalStorageSave = ({ isSaveOpen, setIsSaveOpen, combinedState, setSelectedList }) => {\r\n    const [listName, setListName] = useState('')\r\n    const [listNameForSnackbar, setListNameForSnackbar] = useState('')\r\n    const [openSnackbar, setOpenSnackbar] = useState(false);\r\n\r\n    const handleListNameChange = (e) => {\r\n        setListName(e.target.value)\r\n    }\r\n\r\n    const handleLoadClose = () => {\r\n        setIsSaveOpen(false)\r\n    }\r\n\r\n    const handleListSave = (name) => {\r\n        const stateString = JSON.stringify(combinedState)\r\n        const innerName = `__${name}__`\r\n        localStorage.setItem(innerName, stateString)\r\n\r\n        setListNameForSnackbar(name)\r\n        setListName('')\r\n\r\n        setSelectedList(name)\r\n        handleLoadClose()\r\n        setOpenSnackbar(true)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Dialog open={isSaveOpen} onClose={handleLoadClose} fullWidth>\r\n                <DialogTitle>\r\n                    Save todo list\r\n            </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Set a name for this list\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Name\"\r\n                        fullWidth\r\n                        value={listName}\r\n                        onChange={handleListNameChange}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleLoadClose} color=\"secondary\">\r\n                        Cancel\r\n                </Button>\r\n                    <Button onClick={() => handleListSave(listName)} color=\"primary\" variant='contained'>\r\n                        Save\r\n                </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n                open={openSnackbar}\r\n                autoHideDuration={3000}\r\n                message={`List with name '${listNameForSnackbar}' saved!`}\r\n                onClose={() => setOpenSnackbar(false)}\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default LocalStorageSave\r\n","import React, { useState, Fragment, useEffect } from 'react'\n\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { makeStyles, useTheme, useMediaQuery } from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\n\nimport Column from './Column';\nimport AddTaskForm from './AddTaskForm';\nimport MobileColumnsContainer from './MobileColumnsContainer';\nimport LocalStorageLoad from './LocalStorageLoad';\nimport Title from './Title';\nimport LocalStorageSave from './LocalStorageSave';\n\nconst initalTasks = [\n  { id: 'task-1', content: 'ExampleTodo' },\n  { id: 'task-2', content: 'ExampleDoing' },\n  { id: 'task-3', content: 'ExampleDone' },\n];\n\nconst initialTodoColumn = ['task-1'];\nconst initialDoingColumn = ['task-2'];\nconst initialDoneColumn = ['task-3'];\n\nconst useStyles = makeStyles({\n  columns: {\n    display: 'flex',\n    flexDirection: 'row',\n  }\n})\n\nconst App = () => {\n  const classes = useStyles()\n  const [tasksState, setTasksState] = useState(initalTasks)\n  const [todoColumnState, setTodoColumnState] = useState(initialTodoColumn)\n  const [doingColumnState, setDoingColumnState] = useState(initialDoingColumn)\n  const [doneColumnState, setDoneColumnState] = useState(initialDoneColumn)\n\n  const [isMobileVersion, setIsMobileVersion] = useState();\n\n  const [isLoadOpen, setIsLoadOpen] = useState(false)\n  const [isSaveOpen, setIsSaveOpen] = useState(false)\n\n  const [selectedList, setSelectedList] = useState()\n\n  const combinedState = {\n    tasksState: [...tasksState],\n    todoColumnState: [...todoColumnState],\n    doingColumnState: [...doingColumnState],\n    doneColumnState: [...doneColumnState],\n  }\n\n  const handleStateLoad = (loadedTasksState, loadedTodoColumnState, loadedDoingColumnState, loadedDoneColumnState) => {\n    setTasksState(loadedTasksState);\n    setTodoColumnState(loadedTodoColumnState);\n    setDoingColumnState(loadedDoingColumnState);\n    setDoneColumnState(loadedDoneColumnState)\n  }\n\n  const theme = useTheme();\n  const mathches = useMediaQuery(theme.breakpoints.down('sm'));\n\n  useEffect(() => {\n    setIsMobileVersion(mathches);\n  }, [mathches])\n\n  const columns = {\n    todo: [todoColumnState, setTodoColumnState],\n    doing: [doingColumnState, setDoingColumnState],\n    done: [doneColumnState, setDoneColumnState],\n  }\n\n  const mapThroughTasks = (taskList) => {\n    return taskList.map((item) => tasksState.filter((task) => task.id === item)[0])\n  }\n\n  const [addEventFlag, setAddEventFlag] = useState(false)\n\n  const handleTaskAddition = (taskContent) => {\n    if (!taskContent) {\n      return;\n    }\n\n    setAddEventFlag(true)\n\n    const newTaskId = 'task-' + (tasksState.length + 1);\n    const newTasksState = [...tasksState, { id: newTaskId, content: taskContent }];\n    const newTodoColumnState = [...todoColumnState, newTaskId];\n\n    setTasksState(newTasksState);\n    setTodoColumnState(newTodoColumnState);\n\n    setTimeout(() => {\n      setAddEventFlag(false)\n    }, 100)\n  }\n\n  const handleTaskDelete = (taskId, columnId) => {\n    setTasksState((prev) => prev.filter((task) => task.id !== taskId))\n\n    const setColumnState = columns[columnId][1];\n\n    setColumnState((prev) => prev.filter((task) => task !== taskId))\n  }\n\n  const handleTaskEdit = (taskId, newTaskContent) => {\n    const editedTask = { id: taskId, content: newTaskContent };\n\n    setTasksState((prev) => [...prev.filter((task) => task.id !== taskId), editedTask])\n  }\n\n  const [isDragDisabled, setIsDragDisabled] = useState(false);\n\n  const disableDrag = (bool) => {\n    setIsDragDisabled(bool)\n  }\n\n  const handleTaskMobileMove = (taskId, oldColumnId, newColumnId) => {\n    const startColumn = [...columns[oldColumnId][0]];\n    const finishColumn = [...columns[newColumnId][0]];\n\n    const setStartColumnState = columns[oldColumnId][1];\n    const setFinishColumnState = columns[newColumnId][1];\n\n    startColumn.splice(startColumn.indexOf(taskId), 1);\n    finishColumn.splice(finishColumn.length, 0, taskId);\n\n    setStartColumnState(startColumn);\n    setFinishColumnState(finishColumn);\n  }\n\n  const onDragEnd = (result) => {\n    let { draggableId, source, destination } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    }\n\n    if (source.droppableId !== destination.droppableId) {\n      const startColumn = [...columns[source.droppableId][0]];\n      const finishColumn = [...columns[destination.droppableId][0]];\n\n      const setStartColumnState = columns[source.droppableId][1];\n      const setFinishColumnState = columns[destination.droppableId][1];\n\n      startColumn.splice(source.index, 1);\n      finishColumn.splice(destination.index, 0, draggableId);\n\n      setStartColumnState(startColumn);\n      setFinishColumnState(finishColumn);\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const column = [...columns[source.droppableId][0]];\n      const setColumnState = columns[source.droppableId][1];\n\n      column.splice(source.index, 1);\n      column.splice(destination.index, 0, draggableId)\n\n      setColumnState(column);\n    }\n  }\n\n  return (\n    <Fragment>\n      <CssBaseline />\n      <Container maxWidth='xl' style={{ overflow: 'hidden' }}>\n        <Title isMobileVersion={isMobileVersion} setIsLoadOpen={setIsLoadOpen} setIsSaveOpen={setIsSaveOpen} />\n        <LocalStorageLoad mobile={isMobileVersion} isLoadOpen={isLoadOpen} setIsLoadOpen={setIsLoadOpen} handleStateLoad={handleStateLoad} selectedList={selectedList} setSelectedList={setSelectedList} />\n        <LocalStorageSave mobile={isMobileVersion} isSaveOpen={isSaveOpen} setIsSaveOpen={setIsSaveOpen} combinedState={combinedState} setSelectedList={setSelectedList} />\n        <AddTaskForm mobile={isMobileVersion} handleTaskAddition={handleTaskAddition} />\n        <DragDropContext onDragEnd={onDragEnd} >\n          {!isMobileVersion && <Box className={classes.columns}>\n            <Column tasks={mapThroughTasks(todoColumnState)} handleTaskDelete={handleTaskDelete} title='To do' columnId='todo' handleTaskEdit={handleTaskEdit} />\n            <Column tasks={mapThroughTasks(doingColumnState)} handleTaskDelete={handleTaskDelete} title='Doing' columnId='doing' handleTaskEdit={handleTaskEdit} />\n            <Column tasks={mapThroughTasks(doneColumnState)} handleTaskDelete={handleTaskDelete} title='Done' columnId='done' handleTaskEdit={handleTaskEdit} />\n          </Box>}\n          {isMobileVersion && <MobileColumnsContainer\n            columns={{\n              todo: {\n                tasks: mapThroughTasks(todoColumnState),\n                title: 'To do',\n                columnId: 'todo'\n              },\n              doing: {\n                tasks: mapThroughTasks(doingColumnState),\n                title: 'Doing',\n                columnId: 'doing'\n              },\n              done: {\n                tasks: mapThroughTasks(doneColumnState),\n                title: 'Done',\n                columnId: 'done'\n              }\n            }}\n            handleTaskDelete={handleTaskDelete}\n            handleTaskEdit={handleTaskEdit}\n            handleTaskMobileMove={handleTaskMobileMove}\n            isDragDisabled={isDragDisabled}\n            disableDrag={disableDrag}\n            addEventFlag={addEventFlag} />}\n        </DragDropContext>\n      </Container>\n    </Fragment>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}