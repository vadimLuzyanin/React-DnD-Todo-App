{"version":3,"sources":["Task.jsx","Column.jsx","AddTaskForm.jsx","App.jsx","index.js"],"names":["useStyles","makeStyles","theme","paper","padding","spacing","marginBottom","button","marginLeft","buttonInner","breakpoints","down","width","buttonContainer","display","flexDirection","alignItems","Task","taskId","taskContent","index","columnId","handleTaskDelete","handleTaskEdit","classes","useState","deleteDialogOpen","setDeleteDialogOpen","handleDeleteDialogOpen","handleDeleteDialogClose","handleCloseAndDelete","editDialogOpen","setEditDialogOpen","taskEditValue","setTaskEditValue","handleEditDialogOpen","handleEditDialogClose","handleCloseAndEdit","draggableId","provided","snapshot","ListItem","component","Paper","className","elevation","isDragging","draggableProps","dragHandleProps","ref","innerRef","ListItemText","ListItemIcon","Button","variant","color","onClick","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","TextField","value","onChange","e","target","multiline","fullWidth","root","list","paddingTop","paddingLeft","paddingRight","marginTop","transitionDuration","maxHeight","Column","tasks","title","mappedTasks","map","task","id","content","key","Box","Typography","align","droppableId","List","droppableProps","style","overflow","isDraggingOver","placeholder","form","height","justifyContent","input","submit","minHeight","AddTaskForm","handleTaskAddition","newTaskInputState","setNewTaskInputState","onSubmit","preventDefault","label","type","initalTasks","initialTodoColumn","initialDoingColumn","initialDoneColumn","columns","App","tasksState","setTasksState","todoColumnState","setTodoColumnState","doingColumnState","setDoingColumnState","doneColumnState","setDoneColumnState","todo","doing","done","mapThrougTasks","taskList","item","filter","prev","setColumnState","newTaskContent","editedTask","CssBaseline","Container","maxWidth","newTaskId","length","newTasksState","newTodoColumnState","onDragEnd","result","source","destination","startColumn","finishColumn","setStartColumnState","setFinishColumnState","splice","column","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e58ae0db.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport { makeStyles } from '@material-ui/core'\r\n\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport Button from '@material-ui/core/Button'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    button: {\r\n        marginLeft: theme.spacing(1),\r\n    },\r\n    buttonInner: {\r\n        [theme.breakpoints.down('md')]: {\r\n            width: 0,\r\n            marginBottom: '5px',\r\n        },\r\n    },\r\n    buttonContainer: {\r\n        display: 'flex',\r\n        [theme.breakpoints.down('md')]: {\r\n            flexDirection: 'column',\r\n            alignItems: 'flex-end',\r\n        }\r\n    }\r\n}))\r\n\r\nconst Task = ({ taskId, taskContent, index, columnId, handleTaskDelete, handleTaskEdit }) => {\r\n    const classes = useStyles();\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n\r\n    const handleDeleteDialogOpen = () => {\r\n        setDeleteDialogOpen(true)\r\n    };\r\n\r\n    const handleDeleteDialogClose = () => {\r\n        setDeleteDialogOpen(false)\r\n    }\r\n\r\n    const handleCloseAndDelete = () => {\r\n        setDeleteDialogOpen(false);\r\n        handleTaskDelete(taskId, columnId)\r\n    }\r\n\r\n    const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n    const [taskEditValue, setTaskEditValue] = useState(taskContent)\r\n\r\n    const handleEditDialogOpen = () => {\r\n        setEditDialogOpen(true)\r\n    }\r\n\r\n    const handleEditDialogClose = () => {\r\n        setEditDialogOpen(false)\r\n        setTaskEditValue('')\r\n    }\r\n\r\n    const handleCloseAndEdit = () => {\r\n        if (!taskEditValue) {\r\n            return\r\n        }\r\n        handleTaskEdit(taskId, taskEditValue);\r\n        setTaskEditValue('')\r\n        setEditDialogOpen(false);\r\n    }\r\n\r\n    return (\r\n        <Draggable draggableId={taskId} index={index}>\r\n            {(provided, snapshot) => (\r\n                <ListItem\r\n                    component={Paper}\r\n                    className={classes.paper}\r\n                    elevation={snapshot.isDragging ? 6 : 1}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}\r\n                >\r\n                    <ListItemText>\r\n                        {taskContent}\r\n                    </ListItemText>\r\n                    <div className={classes.buttonContainer}>\r\n                        <ListItemIcon className={classes.button}>\r\n                            <Button variant='outlined' color='primary' className={classes.buttonInner} onClick={handleEditDialogOpen}>edit</Button>\r\n                        </ListItemIcon>\r\n                        <ListItemIcon className={classes.button}>\r\n                            <Button variant='outlined' color='secondary' className={classes.buttonInner} onClick={handleDeleteDialogOpen}>delete</Button>\r\n                        </ListItemIcon>\r\n                    </div>\r\n\r\n                    <Dialog open={deleteDialogOpen} onClose={handleDeleteDialogClose} >\r\n                        <DialogTitle>Are you sure you want to delete this task?</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                Task content: <br /> {taskContent}\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleDeleteDialogClose} variant='outlined' color='primary' >\r\n                                No\r\n                            </Button>\r\n                            <Button onClick={handleCloseAndDelete} variant='outlined' color='secondary' autoFocus>\r\n                                Yes\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n\r\n                    <Dialog open={editDialogOpen} onClose={handleEditDialogClose}>\r\n                        <DialogTitle >Edit task</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                Enter a new text for this task\r\n                            </DialogContentText>\r\n                            <TextField\r\n                                value={taskEditValue}\r\n                                onChange={(e) => setTaskEditValue(e.target.value)}\r\n                                multiline\r\n                                autoFocus\r\n                                fullWidth\r\n                            />\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={handleEditDialogClose} variant='outlined' color=\"primary\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button onClick={handleCloseAndEdit} variant='outlined' color=\"secondary\">\r\n                                Edit\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                </ListItem>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default Task\r\n","import React from 'react'\r\n\r\nimport { Droppable } from 'react-beautiful-dnd'\r\nimport { makeStyles } from '@material-ui/core'\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport List from '@material-ui/core/List'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport Task from './Task'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: theme.spacing(1),\r\n    },\r\n    list: {\r\n        paddingTop: theme.spacing(2),\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(2),\r\n        marginTop: theme.spacing(1),\r\n        transitionDuration: 200,\r\n        maxHeight: '75vh',\r\n    },\r\n}))\r\n\r\nconst Column = ({ tasks, title, columnId, handleTaskDelete, handleTaskEdit }) => {\r\n    const classes = useStyles()\r\n\r\n    const mappedTasks = tasks.map((task, index) =>\r\n        <Task\r\n            taskId={task.id}\r\n            taskContent={task.content}\r\n            index={index}\r\n            key={task.id}\r\n            handleTaskDelete={handleTaskDelete}\r\n            handleTaskEdit={handleTaskEdit}\r\n            columnId={columnId}>\r\n        </Task>\r\n    )\r\n    return (\r\n        <Box className={classes.root} width={1 / 3}>\r\n            <Typography align='center' variant='h2'>{title}</Typography>\r\n            <Droppable droppableId={columnId}>\r\n                {(provided, snapshot) => (\r\n                    <List\r\n                        component={Paper}\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                        className={classes.list}\r\n                        style={{ overflow: 'auto' }}\r\n                        elevation={snapshot.isDraggingOver ? 6 : 1}\r\n                    >\r\n                        {mappedTasks}\r\n                        {provided.placeholder}\r\n                    </List>\r\n                )}\r\n            </Droppable>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Column\r\n","import React, { useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { makeStyles } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles({\r\n    form: {\r\n        display: 'flex',\r\n        width: '100%',\r\n        height: '75px',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-evenly',\r\n        alignItems: 'center',\r\n    },\r\n    input: {\r\n        width: '80%',\r\n    },\r\n    submit: {\r\n        width: '10%',\r\n        minHeight: '75%'\r\n    }\r\n})\r\n\r\nconst AddTaskForm = ({ handleTaskAddition }) => {\r\n    const [newTaskInputState, setNewTaskInputState] = useState('')\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <form className={classes.form} onSubmit={(e) => {\r\n            e.preventDefault();\r\n            handleTaskAddition(newTaskInputState)\r\n            setNewTaskInputState('')\r\n        }}>\r\n            <TextField className={classes.input} label='New Task' variant='outlined' value={newTaskInputState} onChange={(e) => setNewTaskInputState(e.target.value)} />\r\n            <Button className={classes.submit} variant='contained' color='primary' type='submit'>Add Task</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTaskForm\r\n","import React, { useState, Fragment } from 'react'\n\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { makeStyles } from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\n\nimport Column from './Column';\nimport AddTaskForm from './AddTaskForm';\n\nconst initalTasks = [\n  { id: 'task-1', content: 'task-1' },\n  { id: 'task-2', content: 'task-2' },\n  { id: 'task-3', content: 'task-3' },\n  { id: 'task-4', content: 'task-4' },\n  { id: 'task-5', content: 'task-5' },\n  { id: 'task-6', content: 'task-6' },\n  { id: 'task-7', content: 'task-7' },\n  { id: 'task-8', content: 'task-8' },\n  { id: 'task-9', content: 'task-9' },\n];\n\nconst initialTodoColumn = ['task-1', 'task-2', 'task-3']\nconst initialDoingColumn = ['task-4', 'task-5', 'task-6']\nconst initialDoneColumn = ['task-7', 'task-8', 'task-9']\n\nconst useStyles = makeStyles({\n  columns: {\n    display: 'flex',\n    flexDirection: 'row',\n  }\n})\n\nconst App = () => {\n  const classes = useStyles()\n\n  const [tasksState, setTasksState] = useState(initalTasks)\n  const [todoColumnState, setTodoColumnState] = useState(initialTodoColumn)\n  const [doingColumnState, setDoingColumnState] = useState(initialDoingColumn)\n  const [doneColumnState, setDoneColumnState] = useState(initialDoneColumn)\n\n  const columns = {\n    todo: [todoColumnState, setTodoColumnState],\n    doing: [doingColumnState, setDoingColumnState],\n    done: [doneColumnState, setDoneColumnState],\n  }\n\n  const mapThrougTasks = (taskList) => {\n    return taskList.map((item) => tasksState.filter((task) => task.id === item)[0])\n  }\n\n  const handleTaskAddition = (taskContent) => {\n    if (!taskContent) {\n      return;\n    }\n\n    const newTaskId = 'task-' + (tasksState.length + 1);\n    const newTasksState = [...tasksState, { id: newTaskId, content: taskContent }];\n    const newTodoColumnState = [...todoColumnState, newTaskId];\n\n    setTasksState(newTasksState);\n    setTodoColumnState(newTodoColumnState);\n  }\n\n  const handleTaskDelete = (taskId, columnId) => {\n    setTasksState((prev) => prev.filter((task) => task.id !== taskId))\n\n    const setColumnState = columns[columnId][1];\n\n    setColumnState((prev) => prev.filter((task) => task !== taskId))\n  }\n\n  const handleTaskEdit = (taskId, newTaskContent) => {\n    const editedTask = { id: taskId, content: newTaskContent };\n\n    setTasksState((prev) => [...prev.filter((task) => task.id !== taskId), editedTask])\n  }\n\n  const onDragEnd = (result) => {\n    const { draggableId, source, destination } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    }\n\n    if (source.droppableId !== destination.droppableId) {\n      const startColumn = [...columns[source.droppableId][0]];\n      const finishColumn = [...columns[destination.droppableId][0]]\n\n      const setStartColumnState = columns[source.droppableId][1];\n      const setFinishColumnState = columns[destination.droppableId][1];\n\n      startColumn.splice(source.index, 1);\n      finishColumn.splice(destination.index, 0, draggableId);\n\n      setStartColumnState(startColumn);\n      setFinishColumnState(finishColumn)\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const column = [...columns[source.droppableId][0]];\n      const setColumnState = columns[source.droppableId][1];\n\n      column.splice(source.index, 1);\n      column.splice(destination.index, 0, draggableId)\n\n      setColumnState(column)\n    }\n  }\n\n  return (\n    <Fragment>\n      <CssBaseline />\n      <Container maxWidth='xl' style={{overflow: 'hidden'}}>\n        <Typography variant='h1' align='center'>Todo List</Typography>\n        <AddTaskForm handleTaskAddition={handleTaskAddition} />\n        <DragDropContext onDragEnd={onDragEnd} >\n          <Box className={classes.columns}>\n            <Column tasks={mapThrougTasks(todoColumnState)} handleTaskDelete={handleTaskDelete} title='To do' columnId='todo' handleTaskEdit={handleTaskEdit} />\n            <Column tasks={mapThrougTasks(doingColumnState)} handleTaskDelete={handleTaskDelete} title='Doing' columnId='doing' handleTaskEdit={handleTaskEdit} />\n            <Column tasks={mapThrougTasks(doneColumnState)} handleTaskDelete={handleTaskDelete} title='Done' columnId='done' handleTaskEdit={handleTaskEdit} />\n          </Box>\n        </DragDropContext>\n      </Container>\n    </Fragment>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}